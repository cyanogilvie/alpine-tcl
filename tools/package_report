#!/usr/bin/env tclsh

set res	""
append res "| Package | Version | Source |" \n
append res "| --- | --- | --- |" \n
set packages {
	Tcl
	Thread
	tdbc
	pgwire
	tdom
	{tls tcltls_source}
	parse_args
	rl_json
	hash
	unix_sockets
	{tcllib tcllib_source 1.20}
	gc_class
	rl_http
	sqlite3
	cflib
	sop
	netdgram
	evlog
	dsl
	logging
	sockopt
	crypto
	m2
	{urlencode https://github.com/cyanogilvie/aws-tcl}
	{hmac https://github.com/cyanogilvie/aws-tcl}
	tclreadline
	tclsignal
	type
	inotify
	Pixel
	{Pixel_jpeg pixel_source}
	{Pixel_png pixel_source}
	{Pixel_svg_cairo pixel_source}
	{Pixel_webp pixel_source}
	{Pixel_imlib2 pixel_source}
	chantricks
	openapi
	docker
	{aws https://github.com/cyanogilvie/aws-tcl 1.2}
	{aws1::s3 https://github.com/cyanogilvie/aws-tcl}
	{aws1::cognito_identity https://github.com/cyanogilvie/aws-tcl}
	{aws1::secretsmanager https://github.com/cyanogilvie/aws-tcl}
	{aws1::ecr https://github.com/cyanogilvie/aws-tcl}
	{aws https://github.com/cyanogilvie/aws-tcl}
	parsetcl
	tty
	ck
	resolve
} 

foreach p $packages {
	lassign $p package source ver
	if {$package in {ck Pixel_imlib2}} continue
	if {$source eq ""} {set source [string tolower $package]_source}
	if {$ver eq ""}    {
		set interp	[interp create]
		try {
			set ver [$interp eval [list package require $package]]
		} finally {
			interp delete $interp
		}
	}
	if {[info exists ::env($source)]} {
		set source	$::env($source)
	}
	append res "| $package | $ver | $source |" \n
}

puts $res

